if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom.mixed, car, caret, ggeffects,
gghalves, ggpol, ggpubr, groupdata2, lme4, lmerTest,
RColorBrewer, rcompanion,
reshape2, Rmisc, ROCR, rsample, tidyverse, wesanderson
)
tsl_file <- file.path("data", "anonymised_tsl2_208.csv")
sum_file <- file.path("data", "summary_tsl2_208.csv")
# load all data file
if (file.exists(tsl_file)){
tsl2 <- read.csv(tsl_file)
} else {
print('Data file does not exist, check data is in current directory.')
}
# load data summary file
if (file.exists(sum_file)){
sum_dat <- read.csv(sum_file)
} else {
print('Data file does not exist, check data is in current directory if not, run tsl2_phs_q1.Rmd first')
}
View(tsl2)
knitr::opts_chunk$set(echo = TRUE)
##### Libraries #####
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom.mixed, car, caret, ggeffects,
gghalves, ggpol, ggpubr, groupdata2, lme4, lmerTest,
RColorBrewer, rcompanion,
reshape2, Rmisc, ROCR, rsample, tidyverse, wesanderson
)
# extract relevant trials (etc)
df <- tsl2 %>%
filter(task == "tsl2" & quality == 'cold') %>%
select(c(exp_id,instruction,trial,baseline,threshold,phs,age,gender)) %>%
dplyr::rename(subject = exp_id,
phs_01 = phs)
View(df)
# any value < 0 should = 0
df$threshold[df$threshold < 0] <- 0
# using the thermal contrast function:
# (tmax - tmin)/max possible temp (50)
df_con <- df
baselineT <- 32 #temperature below which pp can detect change
# then calculate contrast from max temperature
df_con <- df_con %>%
mutate(TCF = TCF(baseline, threshold))
# the TCF assumes that maximum possible TSL temperature is 50deg
TCF <- function (Tmax, Tmin) {
top_temp = 50
contrast <- (Tmax - Tmin)/top_temp
}
# then calculate contrast from max temperature
df_con <- df_con %>%
mutate(TCF = TCF(baseline, threshold))
View(df_con)
# finally remove NAa
df_con <- na.omit(df.con)
# finally remove NAa
df_con <- na.omit(df_con)
View(df_con)
# extract relevant trials (etc)
df <- tsl2 %>%
filter(task == "tsl2" & quality == 'cold',instruction == 'detect') %>%
select(c(exp_id,instruction,trial,baseline,threshold,phs,age,gender)) %>%
dplyr::rename(subject = exp_id,
phs_01 = phs) %>%
drop_na() #move nas
# any value < 0 should = 0
df$threshold[df$threshold < 0] <- 0
# using the thermal contrast function:
# (tmax - tmin)/max possible temp (50)
df_con <- df
baselineT <- 32 #temperature below which pp can detect change
# then calculate contrast from max temperature
df_con <- df_con %>%
mutate(TCF = TCF(baseline, threshold))
View(df_con)
df_con %>%
ggplot(aes(x = tcf, y = phs_01)) %>%
geom_point()
df_con %>%
ggplot(aes(x = tcf, y = phs_01)) +
geom_point()
df_con %>%
ggplot(aes(x = TCF, y = phs_01)) +
geom_point()
df_con %>%
ggplot(aes(x = TCF, y = phs_01, colour(as_factor(subject)))) +
geom_point() +
theme_classic()
df_con %>%
ggplot(aes(x = TCF, y = phs_01, colour= as_factor(subject))) +
geom_point() +
theme_classic()
df_con %>%
ggplot(aes(x = TCF, y = phs_01, colour= as_factor(subject))) +
geom_point() +
theme_classic() +
theme(legend.position = 'none')
df_con %>%
ggplot(aes(x = TCF, y = phs_01, colour= as_factor(subject))) +
geom_point() +
geom_smooth +
theme_classic() +
theme(legend.position = 'none')
df_con %>%
ggplot(aes(x = TCF, y = phs_01, colour= as_factor(subject))) +
geom_point() +
geom_smooth() +
theme_classic() +
theme(legend.position = 'none')
df_con %>%
ggplot(aes(x = TCF, y = phs_01, colour= as_factor(subject))) +
geom_point() +
geom_smooth() +
theme_classic() +
facet_wrap(~subject)
theme(legend.position = 'none')
df_con %>%
ggplot(aes(x = TCF, y = phs_01, colour= as_factor(subject))) +
geom_point() +
geom_smooth() +
facet_wrap(~subject) +
theme_classic() +
theme(legend.position = 'none')
df_con %>% filter(subject < 10) %>%
ggplot(aes(x = TCF, y = phs_01, colour = as_factor(subject))) +
geom_point() +
#facet_wrap(~subject) +
theme_classic() +
theme(legend.position = 'none')
df_con %>% filter(subject < 10) %>%
ggplot(aes(x = TCF, y = phs_01, colour = as_factor(subject))) +
geom_point() +
facet_wrap(~subject) +
theme_classic() +
theme(legend.position = 'none')
df_con %>% filter(subject < 20) %>%
ggplot(aes(x = TCF, y = phs_01, colour = as_factor(subject))) +
geom_point() +
facet_wrap(~subject) +
theme_classic() +
theme(legend.position = 'none')
df_con %>% filter(subject < 21) %>%
ggplot(aes(x = TCF, y = phs_01, colour = as_factor(subject))) +
geom_point() +
facet_wrap(~subject) +
theme_classic() +
theme(legend.position = 'none')
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
View(df_con)
# stan model
stanHmodel1 <- cmdstanr::cmdstan_model('phs-hierarchical_p1.stan') #initiate model
rebuild_cmdstan()
pacman::p_load(boot, broom.mixed, car, caret, ggeffects,
gghalves, ggpol, ggpubr, groupdata2, lme4, lmerTest,
RColorBrewer, rcompanion,
reshape2, Rmisc, ROCR, rsample, tidyverse, wesanderson,
bayesplot, brms, cmdstanr, extraDistr, furrr)
# stan model
stanHmodel1 <- cmdstanr::cmdstan_model('phs-hierarchical_p1.stan') #initiate model
rebuild_cmdstan()
# stan model
stanHmodel1 <- cmdstanr::cmdstan_model('phs-hierarchical_p1.stan') #initiate model
# run
fit = stanHmodel1$sample(data = list(N = nrow(df_con),
tcf = df_con$TCF,
phs = df_con$phs_01,
S = length(unique(df_con$subject)),
S_id = df_con$subject),
refresh = 200,
iter_sampling = 500,
iter_warmup = 500,
parallel_chains = 4,
max_treedepth = 12,
adapt_delta = 0.90,
init = 1)
fit$diagnostic_summary(
)
fit$summary(
)
log(-2.004164e-0)
exp(-2.004164e-0)
exp(3.1)
fit$diagnostic_summary()
fit$summary()
fit$diagnostic_summary()
fit$summary()
```
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
# run
fit = stanHmodel1$sample(data = list(N = nrow(df_con),
tcf = df_con$TCF,
phs = df_con$phs_01,
S = length(unique(df_con$subject)),
S_id = df_con$subject),
refresh = 200,
iter_sampling = 1000,
iter_warmup = 1000,
parallel_chains = 4,
max_treedepth = 12,
adapt_delta = 0.95,
init = 0)
fit$diagnostic_summary()
fit$summary()
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
exp(4)
# run
fit = stanHmodel1$sample(data = list(N = nrow(df_con),
tcf = (df_con$TCF)*100,
phs = df_con$phs_01,
S = length(unique(df_con$subject)),
S_id = df_con$subject),
refresh = 200,
iter_sampling = 1000,
iter_warmup = 1000,
parallel_chains = 4,
max_treedepth = 12,
adapt_delta = 0.95,
init = 0)
fit$diagnostic_summary()
fit$summary('mus_phs','sigmas_phs')
fit$summary(c('mus_phs','sigmas_phs'))
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
inv_logit_scaled(1)
hist(inv_logit_scaled(rnorm(1000,0,exp(0))))
hist(inv_logit_scaled(rnorm(1000,0,exp(0)))/2)
hist(inv_logit_scaled(rnorm(1000,-5,exp(0)))/2)
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
# run
fit = stanHmodel1$sample(data = list(N = nrow(df_con),
tcf = (df_con$TCF)*100,
phs = df_con$phs_01,
S = length(unique(df_con$subject)),
S_id = df_con$subject),
refresh = 200,
iter_sampling = 1000,
iter_warmup = 1000,
parallel_chains = 4,
max_treedepth = 12,
adapt_delta = 0.95,
init = 0)
fit$diagnostic_summary()
fit$summary(c('mus_phs','sigmas_phs'))
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
fit$summary(c('mus_phs','sigmas_phs'))
exp(-.8)
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
hist(exp(rnorm(1000,-2.1-5)))
hist(exp(rnorm(1000,-2,1.5)))
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
hist(exp(rnorm(1000,-1,2)))
hist(exp(rnorm(1000,-1,1)))
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
fit$summary(c('mus_phs','sigmas_phs'))
fit$diagnostic_summary()
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
# run
fit = stanHmodel1$sample(data = list(N = nrow(df_con),
tcf = (df_con$TCF)*100,
phs = df_con$phs_01,
S = length(unique(df_con$subject)),
S_id = df_con$subject),
refresh = 200,
iter_sampling = 2000,
iter_warmup = 2000,
parallel_chains = 4,
max_treedepth = 12,
adapt_delta = 0.95,
init = 0)
fit$diagnostic_summary()
fit$summary(c('mus_phs','sigmas_phs'))
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
group_draws = as_draws_df(fit$draws(c("mus_phs","sigmas_phs")))
#get 200 random ids for the draws we select to plot.
draw_id = sample(1:4000,200)
# make parameter data-frame
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
mutate(x = list(xs)) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,exp(`mus_phs[1]`), exp(`mus_phs[2]`),
inv_logit_scaled(`mus_phs[3]`)/2,inv_logit_scaled(`mus_phs[4]`)/2))
group_draws = as_draws_df(fit$draws(c("mus_phs","sigmas_phs")))
#get 200 random ids for the draws we select to plot.
draw_id = sample(1:4000,200)
# make parameter data-frame
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
mutate(x = (df_con$TCF*100)) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,exp(`mus_phs[1]`), exp(`mus_phs[2]`),
inv_logit_scaled(`mus_phs[3]`)/2,inv_logit_scaled(`mus_phs[4]`)/2))
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id)
View(params)
View(df)
# make parameter data-frame
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
mutate(x = df_con$subject) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,exp(`mus_phs[1]`), exp(`mus_phs[2]`),
inv_logit_scaled(`mus_phs[3]`)/2,inv_logit_scaled(`mus_phs[4]`)/2))
# make parameter data-frame
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
mutate(x = unique(df_con$subject)) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,exp(`mus_phs[1]`), exp(`mus_phs[2]`),
inv_logit_scaled(`mus_phs[3]`)/2,inv_logit_scaled(`mus_phs[4]`)/2))
# make parameter data-frame
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
mutate(x = list(df_con$TCF*100)) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,exp(`mus_phs[1]`), exp(`mus_phs[2]`),
inv_logit_scaled(`mus_phs[3]`)/2,inv_logit_scaled(`mus_phs[4]`)/2))
list(df_con$TCF*100)
knitr::opts_chunk$set(echo = TRUE)
##### Libraries #####
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom.mixed, car, caret, ggeffects,
gghalves, ggpol, ggpubr, groupdata2, lme4, lmerTest,
RColorBrewer, rcompanion,
reshape2, Rmisc, ROCR, rsample, tidyverse, wesanderson,
bayesplot, brms, cmdstanr, extraDistr, furrr)
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
mutate(x = list(df_con$TCF*100)) %>%
unnest(x) %>%
rowwise()
subject_draws = as_draws_df(fit1draws(c("mus_phs","sigmas_phs","difs_phs"))) %>%
select(-contains("."))
subject_draws = as_draws_df(fit$draws(c("mus_phs","sigmas_phs","difs_phs"))) %>%
select(-contains("."))
# stan model
stanHmodel1 <- cmdstanr::cmdstan_model('phs-hierarchical_p1.stan') #initiate model
group_draws = as_draws_df(fit$draws(c("mus_phs","sigmas_phs")))
#get 200 random ids for the draws we select to plot.
draw_id = sample(1:4000,200)
# make parameter data-frame
params = group_draws %>% select(-contains(".")) %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
mutate(x = list(df_con$TCF*100)) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,exp(`mus_phs[1]`), exp(`mus_phs[2]`),
inv_logit_scaled(`mus_phs[3]`)/2,inv_logit_scaled(`mus_phs[4]`)/2))
subject_draws = as_draws_df(fit$draws(c("mus_phs","sigmas_phs","difs_phs"))) %>%
select(-contains("."))
fit$draws(c("mus_phs","sigmas_phs","difs_phs"))
View(fit)
fit$diagnostic_summary()
fit$summary(c('mus_phs','sigmas_phs'))
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
subject_draws = as_draws_df(fit$draws(c("mus_phs","sigmas_phs","difs_phs"))) %>%
select(-contains("."))
getwd()
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
##### Libraries #####
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom.mixed, car, caret, ggeffects,
gghalves, ggpol, ggpubr, groupdata2, lme4, lmerTest,
RColorBrewer, rcompanion,
reshape2, Rmisc, ROCR, rsample, tidyverse, wesanderson,
bayesplot, brms, cmdstanr, extraDistr, furrr)
tsl_file <- file.path("data", "anonymised_tsl2_208.csv")
sum_file <- file.path("data", "summary_tsl2_208.csv")
# load all data file
if (file.exists(tsl_file)){
tsl2 <- read.csv(tsl_file)
} else {
print('Data file does not exist, check data is in current directory.')
}
# load data summary file
if (file.exists(sum_file)){
sum_dat <- read.csv(sum_file)
} else {
print('Data file does not exist, check data is in current directory if not, run tsl2_phs_q1.Rmd first')
}
# Zscore function
calc_z <- function (value) {
z_score <- (value - mean(value))/sd(value)
}
# contrast function
# Calculating contrast
# TCF - thermal contrast function (developed by FF)
# the TCF assumes that maximum possible TSL temperature is 50deg
TCF <- function (Tmax, Tmin) {
top_temp = 50
contrast <- (Tmax - Tmin)/top_temp
}
#logistic function
prob_func = function(x,a,b,g,l){
#a = intercept, b = slope (lower limit = 0), x = data
#l = lapse rate[0 - 0.5], g = guess rate[0 - 0.5]
prob_func = g + (1-g-l)*(brms::inv_logit_scaled(b*(x-a)))
#prob_func = 0.5+0.5*erf((x-a)/(sqrt(2)*b))
return(prob_func)
}
# extract relevant trials (etc)
df <- tsl2 %>%
filter(task == "tsl2" & quality == 'cold',instruction == 'detect') %>%
select(c(exp_id,instruction,trial,baseline,threshold,phs,age,gender)) %>%
dplyr::rename(subject = exp_id,
phs_01 = phs) %>%
drop_na() #move nas
# any value < 0 should = 0
df$threshold[df$threshold < 0] <- 0
# using the thermal contrast function:
# (tmax - tmin)/max possible temp (50)
df_con <- df
baselineT <- 32 #temperature below which pp can detect change
# then calculate contrast from max temperature
df_con <- df_con %>%
mutate(TCF = TCF(baseline, threshold))
df_con %>% filter(subject < 21) %>%
ggplot(aes(x = TCF, y = phs_01, colour = as_factor(subject))) +
geom_point() +
facet_wrap(~subject) +
theme_classic() +
theme(legend.position = 'none')
# stan model
stanHmodel1 <- cmdstanr::cmdstan_model('phs-hierarchical_p1.stan') #initiate model
# run
fit = stanHmodel1$sample(data = list(N = nrow(df_con),
tcf = (df_con$TCF)*100,
phs = df_con$phs_01,
S = length(unique(df_con$subject)),
S_id = df_con$subject),
refresh = 200,
iter_sampling = 2000,
iter_warmup = 2000,
parallel_chains = 4,
max_treedepth = 12,
adapt_delta = 0.95,
init = 0)
fit$diagnostic_summary()
fit$summary(c('mus_phs','sigmas_phs'))
mcmc_trace(fit$draws(variables = c('mus_phs','sigmas_phs'))) #hairy caterpillars
rstan:::rstudio_stanc("phs-hierarchical_p1.stan")
subject_draws = as_draws_df(fit$draws(c("mus_phs","sigmas_phs","difs_phs"))) %>%
select(-contains("."))
#get 200 random ids for the draws we select to plot.
draw_id = sample(1:4000,200)
params = subject_draws %>%
mutate(draw = 1:n()) %>%
filter(draw %in% draw_id) %>%
pivot_longer(
cols = starts_with("difs"),
names_to = c("outcome","parameters","id"),
names_pattern = "difs_([a-z]+)\\[(\\d+),(\\d+)\\]"
)
# create dataframe for each outcome variable
params_phs = params %>%
filter(outcome == 'phs') %>%
pivot_wider(names_from = "parameters", values_from = value) %>%
dplyr::rename("a" = "1", "b" = "2", "g" = "3", "l" = "4") %>%
mutate(a_phs = exp(`mus_phs[1]` + a * `sigmas_phs[1]`),
b_phs = exp(`mus_phs[2]` + b * `sigmas_phs[2]`),
g_phs = inv_logit_scaled(`mus_phs[3]` + g * `sigmas_phs[3]`)/2,
l_phs = inv_logit_scaled(`mus_phs[4]` + l * `sigmas_phs[4]`)/2)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(bayesplot, brms, cmdstanr, extraDistr, furrr, ggplot2, pracma, tidyverse)
# adding functions to path
dir =  "/Users/au706616/Documents/Git/phs-ageing/analysis/simulations"
source(file.path(dir, 'prob_func.R'))
source(file.path(dir, 'ordered_beta.R'))
source(file.path(dir, 'cor_mat.R'))
params1 = params1 %>%
mutate(x = list(seq(5,80,length.out = n_trials))) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,a_phs,b_phs,g_phs,l_phs))
params1 = params %>%
mutate(x = list(seq(5,80,length.out = n_trials))) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,a_phs,b_phs,g_phs,l_phs))
params1 = params %>%
mutate(x = list(seq(5,80,length.out = 12))) %>%
unnest(x) %>%
rowwise() %>%
mutate(p = prob_func(x,a_phs,b_phs,g_phs,l_phs))
params1 = params1 %>%
mutate(x = df_con$TCF,
p = df_con$phs_01)
params1 = params %>%
mutate(x = df_con$TCF,
p = df_con$phs_01)
params1 = params_phs %>%
mutate(x = df_con$TCF,
p = df_con$phs_01)
View(params_phs)
41600/3109
